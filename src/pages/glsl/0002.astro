---
import LayoutExample from "@layouts/LayoutExample.astro";
---

<LayoutExample title="0002">
  <div class="test-container absolute top-0 left-0 w-full h-full z-0"></div>
</LayoutExample>

<style></style>

<script>
  import { Renderer, Program, Mesh, Geometry } from "ogl";
  import glsl from "glslify";

  const ctn = document.querySelector(".test-container") as HTMLElement;

  const renderer = new Renderer();
  const gl = renderer.gl;
  ctn?.appendChild(gl.canvas);

  gl.clearColor(0, 0, 0, 0);

  function resize() {
    console.log("resize ðŸ¦„");
    const width = ctn?.offsetWidth || window.innerWidth;
    const height = ctn?.offsetHeight || window.innerHeight;
    renderer.setSize(width, height);
  }

  window.addEventListener("resize", resize);
  resize();

  // Triangle that covers viewport, with UVs that still span 0 > 1 across viewport
  const geometry = new Geometry(gl, {
    position: { size: 2, data: new Float32Array([-1, -1, 3, -1, -1, 3]) },
    uv: { size: 2, data: new Float32Array([0, 0, 2, 0, 0, 2]) },
  });
  // Alternatively, you could use the Triangle class.

  const VERT = glsl`
    attribute vec2 uv;
    attribute vec2 position;

    varying vec2 vUv;

    void main() {
      vUv = uv;
      gl_Position = vec4(position, 0, 1);
    }
  `;
  const FRAG = glsl`
    precision highp float;

    uniform float uTime;

    varying vec2 vUv;

    void main() {
      gl_FragColor.rgb = vec3(0.8, 0.7, 1.0) + 0.3 * cos(vUv.xyx + uTime);
      gl_FragColor.a = 1.0;
    }
  `;

  const program = new Program(gl, {
    vertex: VERT,
    fragment: FRAG,
    uniforms: {
      uTime: { value: 0 },
    },
  });

  const mesh = new Mesh(gl, { geometry, program });

  requestAnimationFrame(update);

  function update(t: number) {
    requestAnimationFrame(update);

    program.uniforms.uTime.value = t * 0.001;

    // Don't need a camera if camera uniforms aren't required
    renderer.render({ scene: mesh });
  }
</script>
