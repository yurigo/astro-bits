---
import Spinner from "@components/core/Spinner.astro";

const { url } = Astro.props;
---

<spline-viewer data-url={url} class="w-full h-full block">
  <div class="loading flex items-center justify-center w-full h-full">
    <Spinner />
  </div>
  <canvas class="canvas w-full h-full"></canvas>
</spline-viewer>

<script>
  import { Application } from "@splinetool/runtime";

  class SplineViewer extends HTMLElement {
    spline: Application;
    canvas: HTMLCanvasElement;
    loading: HTMLDivElement;

    constructor() {
      super();
      this.canvas = this.querySelector(".canvas") as HTMLCanvasElement;
      this.loading = this.querySelector(".loading") as HTMLDivElement;
      this.spline = new Application(this.canvas);
    }

    async connectedCallback() {
      // make sure you have a canvas in the body
      // const canvas = this.querySelector(".canvas") as HTMLCanvasElement;

      console.log("dimensions: ", window.innerWidth, window.innerHeight);
      console.log("canvas: ", this.canvas.width, this.canvas.height);
      console.log("canvas: ", this.canvas.width, this.canvas.height);

      const url =
        this.dataset.url ??
        "https://prod.spline.design/6Wq1Q7YGyM-iab9i/scene.splinecode";

      // start the application and load the scene
      // const spline = new Application(canvas);
      // this.spline.setSize(this.canvas.width, this.canvas.height);

      // await spline.load(url, undefined, {
      //   credentials: "include",
      //   mode: "no-cors",
      // });

      await this.spline.load(url);
      this.removeChild(this.loading);
    }
  }

  customElements.define("spline-viewer", SplineViewer);
</script>

<style>
  .loading {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
</style>
