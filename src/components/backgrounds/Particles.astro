---
const {
  particleCount = 200,
  particleSpread = 10,
  speed = 0.1,
  particleColors,
  moveParticlesOnHover = false,
  particleHoverFactor = 1,
  alphaParticles = false,
  particleBaseSize = 100,
  sizeRandomness = 1,
  cameraDistance = 20,
  disableRotation = false,
  className,
} = Astro.props;
---

<astro-particles>
  <div
    class={"particles-container w-full h-full " + className}
    data-particleCount={particleCount}
    data-particleSpread={particleSpread}
    data-speed={speed}
    data-particleColors={particleColors}
    data-moveParticlesOnHover={moveParticlesOnHover}
    data-particleHoverFactor={particleHoverFactor}
    data-alphaParticles={alphaParticles}
    data-particleBaseSize={particleBaseSize}
    data-sizeRandomness={sizeRandomness}
    data-cameraDistance={cameraDistance}
    data-disableRotation={disableRotation}
  >
  </div>
</astro-particles>

<script>
  // https://docs.astro.build/en/guides/client-side-scripts/#web-components-with-custom-elements
  import { Renderer, Program, Mesh, Camera, Geometry } from "ogl";
  import { VERT, FRAG } from "./particles.glsl";

  const hexToRgb = (hex) => {
    hex = hex.replace(/^#/, "");
    if (hex.length === 3) {
      hex = hex
        .split("")
        .map((c) => c + c)
        .join("");
    }
    const int = parseInt(hex, 16);
    const r = ((int >> 16) & 255) / 255;
    const g = ((int >> 8) & 255) / 255;
    const b = (int & 255) / 255;
    return [r, g, b];
  };

  class AstroParticles extends HTMLElement {
    mouseRef = { current: { x: 0, y: 0 } };

    connectedCallback() {
      //const ctn = document.getElementById("particles-container"); //ctnDom.current;
      const ctn = this.querySelector(".particles-container");

      const particleCount = parseInt(ctn.dataset.particlecount);
      const particleSpread = parseFloat(ctn.dataset.particlespread);
      const speed = parseFloat(ctn.dataset.speed);
      const particleColors = ctn.dataset.particlecolors
        ? ctn.dataset.particlecolors.split(",")
        : null;
      const moveParticlesOnHover = ctn.dataset.moveparticlesonhover === "true";
      const particleHoverFactor = parseFloat(ctn.dataset.particlehoverfactor);
      const alphaParticles = ctn.dataset.alphaparticles === "true";
      const particleBaseSize = parseFloat(ctn.dataset.particlebasesize);
      const sizeRandomness = parseFloat(ctn.dataset.sizerandomness);
      const cameraDistance = parseFloat(ctn.dataset.cameradistance);
      const disableRotation = ctn.dataset.disablerotation === "true";

      if (!ctn) return;

      const renderer = new Renderer({ depth: false, alpha: true });
      const gl = renderer.gl;
      ctn.appendChild(gl.canvas);
      gl.clearColor(0, 0, 0, 0);

      const camera = new Camera(gl, { fov: 15 });
      camera.position.set(0, 0, cameraDistance);

      const resize = () => {
        const width = ctn.clientWidth;
        const height = ctn.clientHeight;
        renderer.setSize(width, height);
        camera.perspective({ aspect: gl.canvas.width / gl.canvas.height });
      };
      window.addEventListener("resize", resize, false);
      resize();

      const handleMouseMove = (e) => {
        const rect = ctn.getBoundingClientRect();
        const x = ((e.clientX - rect.left) / rect.width) * 2 - 1;
        const y = -(((e.clientY - rect.top) / rect.height) * 2 - 1);
        this.mouseRef.current = { x, y };
      };

      if (moveParticlesOnHover) {
        ctn.addEventListener("mousemove", handleMouseMove);
      }

      const count = particleCount;
      const positions = new Float32Array(count * 3);
      const randoms = new Float32Array(count * 4);
      const colors = new Float32Array(count * 3);
      const palette =
        particleColors && particleColors.length > 0
          ? particleColors
          : defaultColors;

      for (let i = 0; i < count; i++) {
        let x, y, z, len;
        do {
          x = Math.random() * 2 - 1;
          y = Math.random() * 2 - 1;
          z = Math.random() * 2 - 1;
          len = x * x + y * y + z * z;
        } while (len > 1 || len === 0);
        const r = Math.cbrt(Math.random());
        positions.set([x * r, y * r, z * r], i * 3);
        randoms.set(
          [Math.random(), Math.random(), Math.random(), Math.random()],
          i * 4
        );
        const col = hexToRgb(
          palette[Math.floor(Math.random() * palette.length)]
        );
        colors.set(col, i * 3);
      }

      const geometry = new Geometry(gl, {
        position: { size: 3, data: positions },
        random: { size: 4, data: randoms },
        color: { size: 3, data: colors },
      });

      const program = new Program(gl, {
        vertex: VERT,
        fragment: FRAG,
        uniforms: {
          uTime: { value: 0 },
          uSpread: { value: particleSpread },
          uBaseSize: { value: particleBaseSize },
          uSizeRandomness: { value: sizeRandomness },
          uAlphaParticles: { value: alphaParticles ? 1 : 0 },
        },
        transparent: true,
        depthTest: false,
      });

      const particles = new Mesh(gl, { mode: gl.POINTS, geometry, program });

      let animationFrameId;
      let lastTime = performance.now();
      let elapsed = 0;

      const update = (t) => {
        animationFrameId = requestAnimationFrame(update);
        const delta = t - lastTime;
        lastTime = t;
        elapsed += delta * speed;

        program.uniforms.uTime.value = elapsed * 0.001;

        if (moveParticlesOnHover) {
          particles.position.x = -this.mouseRef.current.x * particleHoverFactor;
          particles.position.y = -this.mouseRef.current.y * particleHoverFactor;
        } else {
          particles.position.x = 0;
          particles.position.y = 0;
        }

        if (!disableRotation) {
          particles.rotation.x = Math.sin(elapsed * 0.0002) * 0.1;
          particles.rotation.y = Math.cos(elapsed * 0.0005) * 0.15;
          particles.rotation.z += 0.01 * speed;
        }

        renderer.render({ scene: particles, camera });
      };

      animationFrameId = requestAnimationFrame(update);

      // return () => {
      //   window.removeEventListener("resize", resize);
      //   if (moveParticlesOnHover) {
      //     ctn.removeEventListener("mousemove", handleMouseMove);
      //   }
      //   cancelAnimationFrame(animationFrameId);
      //   if (ctn.contains(gl.canvas)) {
      //     ctn.removeChild(gl.canvas);
      //   }
      // };
    }
  }

  // Tell the browser to use our AstroParticles class for <astro-particles> elements.
  customElements.define("astro-particles", AstroParticles);
</script>
