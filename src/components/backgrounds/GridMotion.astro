---
const gradientColor = "black";

const items = Astro.props.items || [];

// Ensure the grid has 28 items (4 rows x 7 columns) by default
const totalItems = 28;
const defaultItems = Array.from(
  { length: totalItems },
  (_, index) => `Item ${index + 1}`
);
const combinedItems =
  items.length > 0 ? items.slice(0, totalItems) : defaultItems;
---

<astro-grid-motion>
  <div class="grid-motion-container h-full w-full overflow-hidden">
    <section
      class="w-full h-screen overflow-hidden relative flex items-center justify-center"
      style={{
        background: `radial-gradient(circle, ${gradientColor} 0%, transparent 100%)`,
      }}
    >
      {/* Noise overlay */}
      <div
        class="absolute inset-0 pointer-events-none z-[4] bg-[url('../../../assets/noise.png')] bg-[length:250px]"
      >
      </div>
      <div
        class="gap-4 flex-none relative w-[150vw] h-[150vh] grid grid-rows-4 grid-cols-1 rotate-[-15deg] origin-center z-[2]"
      >
        {
          [...Array(4)].map((_, rowIndex) => (
            <div
              key={rowIndex}
              class="grid-motion-row grid gap-4 grid-cols-7"
              style={{ willChange: "transform, filter" }}
            >
              {[...Array(7)].map((_, itemIndex) => {
                const content = combinedItems[rowIndex * 7 + itemIndex];
                return (
                  <div key={itemIndex} class="grid-motion-item relative">
                    <div class="relative w-full h-full overflow-hidden rounded-[10px] bg-[#111] flex items-center justify-center text-white text-[1.5rem]">
                      {typeof content === "string" &&
                      content.startsWith("http") ? (
                        <div
                          class="w-full h-full bg-cover bg-center absolute top-0 left-0"
                          style={{ backgroundImage: `url(${content})` }}
                        />
                      ) : (
                        <div class="p-4 text-center z-[1]">{content}</div>
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          ))
        }
      </div>
      <div class="relative w-full h-full top-0 left-0 pointer-events-none">
      </div>
    </section>
  </div>
</astro-grid-motion>

<script>
  // https://docs.astro.build/en/guides/client-side-scripts/#web-components-with-custom-elements
  import { gsap } from "gsap";

  class AstroGridMotion extends HTMLElement {
    // constructor() {
    //   super();
    // }

    mouseXRef: number = window.innerWidth / 2;
    removeAnimationLoop: Function = () => {};
    handleMouseMove: Function = (e) => {
      this.mouseXRef = e.clientX;
    };

    connectedCallback() {
      console.log("Custom element added to page.");
      //const ctn = document.getElementById("aurora-container"); //ctnDom.current;
      const gridRef = this.querySelector(".grid-motion-container");
      const rowRefs = this.querySelectorAll(".grid-motion-row");
      const itemRefs = this.querySelectorAll(".grid-motion-item");

      // let mouseXRef = window.innerWidth / 2;

      // const gridRef = useRef(null);
      // const rowRefs = useRef([]); // Array of refs for each row
      // const mouseXRef = useRef(window.innerWidth / 2);

      // // Ensure the grid has 28 items (4 rows x 7 columns) by default
      // const totalItems = 28;
      // const defaultItems = Array.from(
      //   { length: totalItems },
      //   (_, index) => `Item ${index + 1}`
      // );
      // const combinedItems =
      //   this.items.length > 0 ? this.items.slice(0, totalItems) : defaultItems;

      gsap.ticker.lagSmoothing(0);

      // this.handleMouseMove = (e) => {
      //   mouseXRef = e.clientX;
      // };

      const updateMotion = () => {
        const maxMoveAmount = 300;
        const baseDuration = 0.8; // Base duration for inertia
        const inertiaFactors = [0.6, 0.4, 0.3, 0.2]; // Different inertia for each row, outer rows slower

        rowRefs.forEach((row, index) => {
          if (row) {
            const direction = index % 2 === 0 ? 1 : -1;
            const moveAmount =
              ((this.mouseXRef / window.innerWidth) * maxMoveAmount -
                maxMoveAmount / 2) *
              direction;

            // Apply inertia and staggered stop
            gsap.to(row, {
              x: moveAmount,
              duration:
                baseDuration + inertiaFactors[index % inertiaFactors.length],
              ease: "power3.out",
              overwrite: "auto",
            });
          }
        });
      };

      this.removeAnimationLoop = gsap.ticker.add(updateMotion);
      this.addEventListener("mousemove", this.handleMouseMove);

      // return () => {
      //   this.removeEventListener("mousemove", handleMouseMove);
      //   removeAnimationLoop();
      // };
    }

    disconnectedCallback() {
      console.log("Custom element removed from page.");
      this.removeEventListener("mousemove", this.handleMouseMove);
      this.removeAnimationLoop();
    }
  }

  // Tell the browser to use our AstroGridMotion class for <astro-grid-motion> elements.
  customElements.define("astro-grid-motion", AstroGridMotion);
</script>
