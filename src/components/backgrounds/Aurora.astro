---
const {
  colorStops = ["#00d8ff", "#7cff67", "#00d8ff"],
  amplitude = 1.0,
  speed = 0.5,
} = Astro.props;
---

<astro-aurora>
  <div
    class="aurora-container w-full h-full"
    data-colorStops={colorStops}
    data-amplitude={amplitude}
    data-speed={speed}
  >
  </div>
</astro-aurora>

<script>
  // https://docs.astro.build/en/guides/client-side-scripts/#web-components-with-custom-elements
  import { Renderer, Program, Mesh, Color, Triangle } from "ogl";
  import { VERT, FRAG } from "./aurora.glsl";

  class AstroAurora extends HTMLElement {
    constructor() {
      super();
    }
    connectedCallback() {
      //const ctn = document.getElementById("aurora-container"); //ctnDom.current;
      const ctn = this.querySelector(".aurora-container");

      const colorStops = ctn.dataset.colorstops.split(",");
      const amplitude = parseFloat(ctn.dataset.amplitude);
      const speed = parseFloat(ctn.dataset.speed);

      const props = { speed, amplitude, colorStops };

      const renderer = new Renderer();
      const gl = renderer.gl;
      gl.clearColor(1, 1, 1, 1);

      let program;

      function resize() {
        if (!ctn) return;
        const width = ctn.offsetWidth;
        const height = ctn.offsetHeight;
        renderer.setSize(width, height);
        if (program) {
          program.uniforms.uResolution.value = [width, height];
        }
      }
      window.addEventListener("resize", resize);

      const geometry = new Triangle(gl);
      if (geometry.attributes.uv) {
        delete geometry.attributes.uv;
      }

      const colorStopsArray = colorStops.map((hex) => {
        const c = new Color(hex);
        return [c.r, c.g, c.b];
      });

      program = new Program(gl, {
        vertex: VERT,
        fragment: FRAG,
        uniforms: {
          uTime: { value: 0 },
          uAmplitude: { value: amplitude },
          uColorStops: { value: colorStopsArray },
          uResolution: { value: [ctn.offsetWidth, ctn.offsetHeight] },
        },
      });

      const mesh = new Mesh(gl, { geometry, program });
      ctn.appendChild(gl.canvas);

      let animateId = 0;
      const update = (t) => {
        animateId = requestAnimationFrame(update);
        const { time = t * 0.01, speed = 1.0 } = props;
        program.uniforms.uTime.value = time * speed * 0.1;
        program.uniforms.uAmplitude.value = amplitude ?? 1.0;
        const stops = colorStops;
        program.uniforms.uColorStops.value = stops.map((hex) => {
          const c = new Color(hex);
          return [c.r, c.g, c.b];
        });
        renderer.render({ scene: mesh });
      };
      animateId = requestAnimationFrame(update);

      resize();
    }
  }

  // Tell the browser to use our AstroAurora class for <astro-aurora> elements.
  customElements.define("astro-aurora", AstroAurora);
</script>
